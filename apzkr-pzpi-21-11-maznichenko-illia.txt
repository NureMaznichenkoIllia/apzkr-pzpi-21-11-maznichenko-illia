Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії

КУРСОВА РОБОТА
ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни «Архітектура програмного забезпечення»
Тема роботи: Система управління маршрутами метро

	Студент гр. ПЗПІ-21-11                ________________ Мазніченко І.І.
                                                                           (підпис)
	Керівник роботи                          ________________ доц. Лещинська І.О.
                                                                            (підпис)
						      Роботу захищено «__»________ 2024р. 
						        з оцінкою     __________________

	Комісія: 				    ______________ доц. Лещинський В.О.
(підпис)
                                                        ________________ доц. Лещинська І.О.
(підпис)
                                                       _______________ ст.викл. Сокорчук І.П.
(підпис)




Харків 2024 р.


Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук Кафедра програмної інженерії
 Спеціальність 121 – Інженерія програмного забезпечення
Курс	3	Семестр	6	.
Навчальна дисципліна Архітектура програмного забезпечення


ЗАВДАННЯ
НА  КУРСОВУ РОБОТУ СТУДЕНТОВІ

Мазніченку Іллі Ігоровичу
1.	Тема проекту: Система управління маршрутами метро
2.	Термін узгодження завдання з лабораторних робіт «_30_»_березня 2024р.
3.	Термін здачі завдання з лабораторних робіт «29» травня 2024р..
4.	Вихідні дані до проекту: методичні вказівки до виконання лабораторних робіт, вимоги до системи, аркуш завдання до лабораторних робіт, рекомендації що до розробки.
5.	Зміст звітів з лабораторних робіт (перелік питань, що належить розробити): Vision and Scope document з детальним описом вимог до проекту, опис візуальної частини (frontend) яка буде представляти собою інтерфейс для конфігурації інформації про маршрути метро та перегляд статусу потягів, мобільна версія яка буде реалізацією інтерфейсу для перегляду карти, опис частини кодування (backend) яка буде реалізовувати основну логіку програми та взаємодію з базою даних, модульні частини (IoT) який буде надсилати геопозицію потяга.
                                                                                          

КАЛЕНДАРНИЙ ПЛАН





№	Основні етапи виконання
проекту в рамках лабораторних робіт	Термін виконання етапів	Примітка
1	Видача	теми,	узгодження	і
затвердження теми	01.04.2024	
2	Виконання	1	лабораторної
роботи	01.04.2024-08.05.2024	
3	Захист 1 лабораторної роботи	01.05.2024	
4	Виконання	2	лабораторної
роботи	11.04.2024-18.05.2024	
5	Захист 2 лабораторної роботи	21.05.2024	
6	Виконання	3	лабораторної
роботи	21.05.2024-30.05.2024	
7	Захист 3 лабораторної роботи	30.05.2024	
8	Виконання	4	лабораторної
роботи	11.05.2024-30.05.2024	
9	Захист 4 лабораторної роботи	31.05.2024	
10	Виконання	5	лабораторної
роботи	01.06.2024-02.06.2024	
11	Захист 5 лабораторної роботи	02.06.2024	
12	Захист проекту	04.06.2024	


Дата видачі теми проекту у «30» березня 2024 р


Викладач лабораторних робіт	                                         доц. Лещинська І.О         
(підпис)


Завдання прийняв до виконання
ст.гр. ПЗПІІ-21-11	         		   Мазніченко І.І.         
        (підпис)


РЕФЕРАТ

Пояснювальна записка з курсової роботи: 29 сторінок, 3 рисунки, 5 джерел.
	АВТОМАТИЗАЦІЯ, МЕНЕДЖЕР, МЕТРО, ПОТЯГ, СТАНЦІЯ, КОРИСТУВАЧ, КАРТ	А, ASP.NET, C#, OOP, SOLID.
Управління маршрутами метро є складним завданням, яке включає в себе координацію руху потягів, забезпечення безпеки пасажирів та ефективного використання ресурсів. Основні аспекти менеджменту маршрутами метро включають розробку графіків руху, моніторинг та управління поточним станом мережі, а також адаптацію до змінних умов.
Розробка інтерактивної карти метро є важливим інструментом для підвищення зручності користування метрополітеном. Така карта повинна надавати пасажирам вичерпну інформацію про всі маршрути, станції, пересадки та інші важливі об'єкти інфраструктури.
Інтернет речей (IoT) відкриває нові можливості для підвищення ефективності управління транспортними системами, зокрема метрополітеном. Розробка IoT пристрою для відстежування позиції потяга дозволяє в режимі реального часу отримувати точну інформацію про місцезнаходження кожного потяга. Такі пристрої можуть бути обладнані GPS-модулями, датчиками руху, а також комунікаційними модулями для передачі даних до центральної системи управління. 

ЗМІСТ

ВСТУП	6
1 АНАЛІЗ ПРЕДМЕТНОЇ ГАЛУЗІ	8
2 ПОСТАНОВКА ЗАДАЧІ	9
2.1 Основний функціонал системи	9
2.2 Допущення та залежності	10
2.3 Релізи	11
2.4 Користувацькі обмеження	11
3.1 Back-end частина системи	12
3.2 Frontend-частина системи	15
3.3 IoT частина системи	16
4 СТРУКТУРА БАЗИ ДАНИХ	18
4.1 ER-моделювання	18
4.2 Реалізація БД	19
5 ОСОБЛИВОСТІ РЕАЛІЗАЦІЇ ПЗ	21
5.1 Backend	21
5.2 Frontend	22
5.3 IoT	24
6 ОСОБЛИВОСТІ ЗАСТОСУВАННЯ	25
ВИСНОВКИ	27
ПЕРЕЛІК ДЖЕРЕЛ	29

ВСТУП

Метрополітен є невід'ємною частиною транспортної системи великих міст, забезпечуючи швидке та зручне переміщення мільйонів пасажирів щодня. Ефективне управління маршрутами метро є критично важливим для забезпечення безпеки, своєчасності та комфорту перевезень. Зі збільшенням кількості пасажирів та розширенням метрополітену виникає необхідність впровадження сучасних технологій та інноваційних рішень для оптимізації роботи цієї складної системи.
Програмна система управління маршрутами метро є ключовим елементом для досягнення цих цілей. Вона включає в себе розробку та впровадження інструментів для планування та моніторингу руху потягів, управління аварійними ситуаціями, аналізу даних та прийняття рішень в режимі реального часу. Використання сучасних інформаційних технологій, таких як Інтернет речей (IoT), штучний інтелект та великі дані, дозволяє значно підвищити ефективність та надійність роботи метрополітену.
Ця курсова робота присвячена розробці програмної системи управління маршрутами метро, яка включає інтерактивну карту метро та IoT пристрої для відстежування позиції потягів. У вступній частині розглядається актуальність даної теми, визначаються основні цілі та завдання дослідження, а також описується структура роботи.
Актуальність даної теми обумовлена необхідністю вдосконалення транспортної інфраструктури для забезпечення якісного та безпечного обслуговування пасажирів. З огляду на швидкий розвиток міст та зростання населення, метрополітен стає дедалі важливішим компонентом міського транспорту. Впровадження програмних рішень для управління маршрутами метро сприятиме підвищенню ефективності роботи системи, зменшенню затримок та покращенню якості обслуговування.
Основні цілі дослідження включають розробку концепції програмної системи управління маршрутами метро, створення інтерактивної карти для зручного користування пасажирами, а також розробку IoT пристрою для відстежування потягів у реальному часі. Завдання дослідження включають аналіз існуючих рішень, визначення вимог до нової системи, проектування та реалізацію програмних та апаратних компонентів, а також тестування та оцінку ефективності запропонованих рішень.
Структура роботи складається з кількох розділів, у яких детально розглядаються теоретичні основи управління маршрутами метро, методологія розробки програмної системи, процес створення інтерактивної карти та IoT пристрою, а також результати тестування та аналіз ефективності запропонованих рішень. У висновках підводяться підсумки дослідження та формулюються рекомендації щодо подальшого розвитку та вдосконалення системи управління маршрутами метро.


1 АНАЛІЗ ПРЕДМЕТНОЇ ГАЛУЗІ ТА КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ
Передумови створення системи управління маршрутами метро виникають із необхідності забезпечення ефективного та безпечного пересування пасажирів в місті, особливо в умовах зростаючої міської популяції та транспортного навантаження.
Перед початком розробки системи управління маршрутами метро важливо ретельно проаналізувати різноманітні фактори, такі як густота населення, географічне розташування станцій, потреби пасажирів у перевезенні, часові розклади та зручність маршрутів.
Створення такої системи може забезпечити оптимальне використання ресурсів метрополітену, розподіляючи потік пасажирів ефективно між різними лініями та станціями відповідно до їхніх потреб та попиту. Це дозволить запобігти перевантаженням на певних ділянках та забезпечить комфортне та швидке переміщення для всіх користувачів.
Крім того, система управління маршрутами метро може покращити пунктуальність та надійність громадського транспорту, що сприятиме підвищенню якості життя міського населення та зменшить транспортні затори.
Перед створенням системи управління маршрутами метро також варто врахувати питання технічної стійкості та безпеки, забезпечуючи відповідні технічні та технологічні заходи для запобігання аваріям та неполадкам.
Загалом, передумови створення системи управління маршрутами метро базуються на потребі вдосконалення міського транспорту, забезпеченні зручності та доступності для всіх мешканців та гостей міста, а також на покращенні ефективності та надійності громадського транспорту в цілому.


2 ПОСТАНОВКА ЗАДАЧІ

Аналіз та розробка Системи управління маршрутами метро є метою курсової роботи.
2.1 Основний функціонал системи
Потреби адміністратора:
	оновлення розкладів метропоїздів на всіх лініях;
	перевірка статусу роботи системи безпеки на всіх станціях;
	запуск тестування нової версії програмного забезпечення системи;
	перегляд звітів про витрати енергії та ефективність маршрутів;
	надання доступу або скасування доступу до певних функцій системи для окремих користувачів або груп користувачів;
	відстеження позиції потягів;
	реєстрація маршрутів;
	облік станцій;
	керування маршрутами.
Потреби користувача:
	отримання інформації про розклад руху метропоїздів на певній лінії або станції;
	покупка квитків або карти проїзду через мобільний додаток або в інтернеті;
	отримання повідомлень про запізнення чи зміни в роботі метро;
	подання скарг чи повідомлення про проблеми на станціях або під час подорожі;
	отримання інформації про розташування станцій, маршрути та доступні послуги в метрополітені;
	перегляд карти руху потягів.

2.2 Допущення та залежності

При розробці системи управління маршрутами метро важливо врахувати різноманітні припущення та залежності, які можуть обмежити її функціональність та ефективність. Деякі з них включають:
	технічні обмеження: Припущення про технічні можливості та обмеження апаратного та програмного забезпечення, які можуть вплинути на функціональність системи та її продуктивність;
	інтеграція з існуючими системами: Залежність від існуючих систем метрополітену та інших транспортних служб, які можуть впливати на процеси інтеграції та обміну даними;
	потреби користувачів: Припущення про потреби та очікування користувачів системи, що можуть впливати на її дизайн та функціонал;
	безпека та конфіденційність даних: Залежність від заходів забезпечення безпеки та конфіденційності даних, які можуть обмежувати доступ до деяких функцій або обмін інформацією;
	регуляторні обмеження: Припущення про регуляторні вимоги та стандарти, які обмежують функціональність та використання системи;
	фінансові обмеження: Залежність від фінансових ресурсів для розробки та впровадження системи, що може впливати на обсяг робіт та можливості розширення;
	географічні та кліматичні умови: Припущення про географічні та кліматичні особливості міста, які можуть впливати на роботу та ефективність системи управління маршрутами метро;
	врахування цих припущень та залежностей є важливим етапом при розробці системи, оскільки вони дозволяють адаптувати її до реальних умов та потреб користувачів.

2.3 Релізи

Всі компоненти що покривають потреби адміністратора та користувача повинні бути реалізовані в першому випуску.

2.4 Користувацькі обмеження

Враховуючи	предметну	область	проект	повинен	мати наступні  обмеження:
	прилад відстеження геопозиції повинен бути лише 1 на потяг;
	кожен маршрут повинен мати декілька станцій;
	кожен потяг повинен належати до певного маршруту;
	потяг повинен проходити станції одна за одною.

3 ФОРМУВАННЯ ВИМОГ ДО ПРОГРАМНОЇ СИСТЕМИ

3.1 Back-end частина системи
Серверна частина системи управління маршрутами метро відіграє ключову роль у забезпеченні ефективної та надійної роботи системи. Її функціональність охоплює обробку запитів від клієнтських додатків, взаємодію з базою даних для зберігання та оновлення інформації про маршрути, станції, платформи, поїзди, розклади та персонал метрополітену.
Ця частина системи реалізована з використанням принципів архітектури RESTful API, що дозволяє забезпечити зручний та стандартизований доступ до функцій системи через HTTP-протокол. Для розробки серверної частини використувуються сучасні мови програмування та фреймворки, такі як: C# з ASP.NET Core, Entity Frameworw, .NET 5.
Основні завдання серверної частини включають обробку запитів на отримання, створення, оновлення та видалення інформації про маршрути, станції та інші елементи метрополітену, а також забезпечення відповідного функціоналу для адміністрування системи та моніторингу її роботи.
Діаграма пакетів відображає модульну структуру системи та відносини між її компонентами. Кожен пакет представляє логічно пов'язаний набір класів, які виконують певну функціональність. У системі управління маршрутами метро можуть бути такі основні пакети:
–	керування маршрутами - пакет відповідає за управління маршрутами метро, включаючи створення, редагування та видалення маршрутів, а також надання інформації про них.
–	керування станціями і платформами - в цьому пакеті реалізована функціональність для управління станціями та платформами метро, включаючи їх створення, редагування та видалення, а також управління розкладами руху поїздів на платформах.
–	управління поїздами і графіками - пакет відповідає за управління поїздами метро, включаючи їх реєстрацію, редагування та видалення, а також керування графіками руху поїздів.
Діаграму пакетів показано на рисунку 1.1.
Рисунок 1.1 – Діаграма пакетів
Перед діаграмою розгортання системи управління маршрутами метро важливо розглянути архітектурні аспекти розміщення програмного забезпечення та обладнання. Діаграма розгортання показує фізичну структуру системи та взаємозв'язки між її компонентами на рівні обладнання. Кожен вузол розгортання представляє окремий об'єкт або компонент системи, що виконує певні функції.
У випадку системи управління маршрутами метро, діаграма розгортання включає такі елементи:
–	серверні вузли - вузли представляють сервери, на яких розгортане серверне програмне забезпечення системи, такі як веб-сервер та база даних. Вони відповідають за обробку запитів від клієнтів та забезпечення доступу до даних;
–	клієнтські вузли - вузли відображають пристрої або додатки, які використовуються користувачами для взаємодії з системою, такі як мобільні додатки та веб-браузери;
–	бази даних - вузли відображають сервери баз даних, які використовуються для зберігання даних системи.

3.2 Frontend-частина системи

У системі існує багато сторінок. Нижче буде розписано усі сторінки системи.
Сторінка ліній метро. На цій сторінці відображається інформація про всі лінії метро. Користувачі можуть переглядати список доступних ліній, а також деталі кожної лінії. Адміністратори можуть додавати нові лінії, редагувати існуючі або видаляти непотрібні. Компоненти: список ліній, форма додавання/редагування лінії.
Сторінка платформ. Ця сторінка відображає інформацію про платформи на різних станціях метро. Користувачі можуть переглядати розташування платформ та інші важливі дані. Адміністратори можуть управляти даними платформ, додавати нові, редагувати або видаляти існуючі. Компоненти: список платформ, форма додавання/редагування платформ.
Сторінка розкладів. На цій сторінці представлено розклад руху потягів. Користувачі можуть переглядати розклади для різних ліній та станцій. Адміністратори мають можливість редагувати розклади, додавати нові маршрути або видаляти існуючі. Компоненти: список розкладів, форма додавання/редагування розкладів.
Сторінка персоналу. Ця сторінка містить інформацію про персонал, який обслуговує метро. Користувачі можуть переглядати список співробітників, їхні посади та контактні дані. Адміністратори можуть управляти даними про персонал, додавати нових співробітників, редагувати інформацію про них або видаляти непотрібні записи. Компоненти: список співробітників, форма додавання/редагування співробітників.
Сторінка станцій. На цій сторінці відображається інформація про станції метро. Користувачі можуть переглядати деталі про кожну станцію, включаючи назву та інші дані. Адміністратори можуть додавати нові станції, редагувати інформацію про існуючі або видаляти станції. Компоненти: список станцій, форма додавання/редагування станцій.
Сторінка потігів. Ця сторінка містить інформацію про потяги, які курсують по маршрутах метро. Користувачі можуть переглядати список потягів та їхні деталі. Адміністратори можуть управляти даними про потяги, додавати нові, редагувати інформацію про існуючі або видаляти непотрібні записи. Компоненти: список потягів, форма додавання/редагування потягів.
Сторінка карти метро. На цій сторінці користувач може у реальному часі переглядати де знаходяться потяги на карті. На сторінці представлена карта метро з списком ліній та станціями, а також зеленими кружечками (потягами.)

3.3 IoT частина системи

IoT пристрій надсилає дані на сервер.
Інтернет речей (IoT) є невід'ємною частиною сучасних систем моніторингу та управління. У даному проекті IoT пристрої встановлені на потягах для збору та передачі даних про їх місцезнаходження. Ці пристрої оснащені GPS-модулями, які відстежують географічні координати потяга в режимі реального часу.
Пристрої збирають дані про поточну широту, довготу та інші важливі параметри, такі як швидкість та напрямок руху. Ці дані періодично надсилаються на центральний сервер через мережу Інтернет. Використовується безпечний протокол передачі даних, такий як HTTP, щоб забезпечити надійну і швидку доставку інформації. Передані дані зберігаються на сервері в базі даних, де вони можуть бути проаналізовані та використані для подальшої обробки.
Координати використовуються для мапи.
Отримані від IoT пристроїв координати використовуються для відображення потягів на інтерактивній карті у веб-додатку. Кожен потяг має унікальний ідентифікатор, що дозволяє відслідковувати його маршрут у реальному часі. Сервер обробляє отримані координати та оновлює інформацію на карті, яка доступна для користувачів.
Інтерактивна карта дозволяє користувачам бачити поточне місцезнаходження потягів, їхній маршрут, а також прогнозований час прибуття на наступні станції. Це особливо корисно для пасажирів, які можуть планувати свої поїздки, знаючи точний час прибуття потяга на потрібну станцію. Карта також надає адміністраторам можливість моніторити рух потягів, аналізувати їхню пунктуальність та виявляти будь-які відхилення від графіку.
Таким чином, IoT частина системи забезпечує точний та своєчасний збір даних про місцезнаходження потягів, що дозволяє створити ефективний інструмент для моніторингу та управління транспортною системою. Інтерактивна карта, яка використовує ці дані, підвищує зручність користування транспортом для пасажирів та покращує загальну ефективність роботи системи.

4 ОСОБЛИВОСТІ РЕАЛІЗАЦІЇ ТА АРХІТЕКТУРА
4.1 ER-моделювання


Опис побудови бази даних в системі управління маршрутами метро є важливим кроком у процесі розробки, оскільки вона забезпечує ефективне зберігання та організацію інформації, необхідної для функціонування системи. У цьому етапі буде розглянуто структуру бази даних, визначено сутності та їх взаємозв'язки, щоб підготувати фундамент для подальшої розробки системи.
Перед нами представлена ER-діаграма (див. рис. 1.2) бази даних системи управління маршрутами метро. Ця діаграма відображає сутності, їх атрибути та зв'язки між ними. Ретельний аналіз цієї структури дозволить нам краще зрозуміти, як буде організована інформація в базі даних та як вона буде використовуватися в системі.
Рисунок 1.2 – ER-діаграма
Діаграма визначає структуру даних і взаємозв'язки між ними, що допоможе нам ефективно зберігати та отримувати інформацію, необхідну для роботи системи.

4.2 Реалізація БД

Відповідно до теми "Система управління маршрутами метро", визначено наступний перелік атрибутів для сутностей:
–	лінія метро – id, назва. У цієї сутності первинний ключ id;
–	платформа – id, назва, нотатки, станція. У цієї сутності первинний ключ id;
–	розклад – id, платформа, поїзд, дата прибуття, дата відправки. У цієї сутності первинний ключ id;
–	персонал – id, ім’я, прізвище, номер телефону, станція. У цієї сутності первинний ключ id;
–	станція – id, назва, ліва позиція по X, ліва позиція по Y, права позиція по X, права позиція по Y, лінія метро. У цієї сутності первинний ключ id;
–	поїзд – id, назва, модель, кількість місць, поточна позиція по X, поточна позиція по Y. У цієї сутності первинний ключ id.
Зв'язки між сутностями:
–	лінія – станція – зв’язок один до багатьох. У лінії метро може бути багато станцій;
–	станція – платформа – зв'язок один до багатьох. Станція має багато платформ;
–	платформа – розклад – зв'язок один до багатьох. На платформі є список розкладу поїздів;
–	розклад – поїзд – зв'язок один до багатьох. Поїзд має багато розкладів;
–	станція – персонал – зв'язок один до багатьох. Багато персоналу на кожній станції.

5 ОСОБЛИВОСТІ ЗАСТОСУВАННЯ

Веб-додаток включає функціонал для управління маршрутами потягів. Ця функція дозволяє адміністраторам створювати, редагувати та видаляти маршрути, встановлювати розклад руху потягів, а також налаштовувати зупинки та пересадки. Інтерфейс для менеджменту маршрутів забезпечує зручність та простоту у використанні, дозволяючи швидко вносити зміни та актуалізувати інформацію про маршрути. Адміністратори можуть також аналізувати дані про завантаженість маршрутів, що допомагає оптимізувати розклад та підвищити ефективність роботи транспортної системи.
Рисунок 1.3 – Use case діаграма
На наведеній use case діаграмі можна побачити усі можливості користувачів.
Однією з ключових особливостей веб-додатка є інтерактивна карта потягів. Ця карта відображає поточне місцезнаходження всіх потягів у режимі реального часу. Користувачі можуть переглядати маршрути, бачити точне розташування потягів, а також отримувати інформацію про заплановані зупинки та пересадки. Інтерактивні елементи карти дозволяють користувачам легко знаходити потрібні станції, переглядати деталі маршрутів та отримувати оновлення про затримки або зміни у розкладі. Карта потягів також може включати фільтри для зручного пошуку та перегляду різних маршрутів або типів потягів.

ВИСНОВКИ

У процесі розробки даного програмного забезпечення були досягнуті значні результати, що дозволили створити ефективну систему управління маршрутами потягів та моніторингу їх геопозиції. Основні досягнення та особливості проекту можна підсумувати наступним чином:
Серверна частина:
Використання Entity Framework: Забезпечило зручний та ефективний спосіб роботи з базою даних SQL Server, що значно спростило розробку та зменшило кількість помилок.
ASP.NET Core: Забезпечив високу продуктивність, стабільність та легкість у розробці серверної частини додатку.
REST API: Забезпечив стандартизовану та масштабовану взаємодію між клієнтом та сервером, що спростило інтеграцію з іншими системами.
Конвертація запитів: Підвищила гнучкість та ефективність обробки даних, що дозволило забезпечити стабільну роботу системи.
Робота з геопозицією потягів: Забезпечила точне та своєчасне відображення місцезнаходження потягів, що є критично важливим для планування та безпеки.
Frontend:
React: Забезпечив швидкий та інтерактивний інтерфейс користувача, спрощуючи процес розробки та підтримки.
React Hook Form: Підвищив ефективність управління формами, забезпечуючи зручну валідацію та обробку даних.
Відображення карти маршрутів метро: Надало користувачам зручний інструмент для навігації та планування маршрутів, підвищуючи їхній комфорт та ефективність користування транспортною системою.
IoT:
Передача даних про геопозицію потягів: Автоматизувала процес збору даних, підвищивши точність та оперативність отримання інформації.
Емуляція за допомогою WinForms: Дозволила проводити тестування та налаштування системи в умовах, наближених до реальних, що значно прискорило розробку та підвищило надійність ПЗ.
Загалом, розроблене програмне забезпечення значно покращило управління транспортною системою та підвищило зручність для користувачів. Використання сучасних технологій та підходів дозволило створити надійну, ефективну та масштабовану систему, яка відповідає сучасним вимогам та забезпечує високий рівень обслуговування пасажирів.

ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ

1.	Введення в Web API C#. URL: https://metanit.com/sharp/mvc/12.1.php. (дата звернення 29.04.2024)
2.	.NET 5 документація: https://learn.microsoft.com/ru-ru/dotnet/.(дата звернення 12.05.2024)
3.	Bootstrap. URL: https://getbootstrap.com/.(дата звернення 13.05.2024)
4.	TypeScript: URL: https://www.npmjs.com/package/typescript. (дата звернення 05.05.2024)
5.	React. URL: https://react.dev/. (дата звернення 8.05.2024)
