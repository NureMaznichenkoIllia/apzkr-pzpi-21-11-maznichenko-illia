{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u0418\\u043B\\u044C\\u044F\\\\Desktop\\\\client\\\\src\\\\pages\\\\Map.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useMemo } from 'react';\nimport { Circle } from '../components/UI/Circle/Circle';\nimport { LineConnection } from '../components/UI/LineConnection/LineConnection';\nimport { getLines } from '../http/lineApi';\nimport { getTrains } from '../http/trainApi';\nimport cl from '../styles/Map.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst colors = [\"red\", \"blue\", \"black\", 'pink', \"yellow\"];\nexport const Map = () => {\n  _s();\n  const [lines, setLines] = useState([]);\n  const [trains, setTrains] = useState([]);\n  const fetchLines = async () => {\n    await getLines().then(data => {\n      setLines(data);\n    });\n  };\n  const fetchTrains = async () => {\n    await getTrains().then(data => {\n      setTrains(data);\n    });\n  };\n  useEffect(() => {\n    fetchTrains();\n    const interval = setInterval(() => {\n      fetchTrains();\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  useEffect(() => {\n    fetchLines();\n  }, []);\n  const normalizeLines = useMemo(() => {\n    return lines.map(line => {\n      return {\n        lineName: line.name,\n        dots: line.stations.map(station => ({\n          name: station.name,\n          position: {\n            x: (station.locationLeftX + station.locationRightX) / 2,\n            y: (station.locationLeftY + station.locationRightY) / 2\n          }\n        }))\n      };\n    });\n  }, [lines]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: cl.container,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cl.map,\n      children: normalizeLines.length > 0 && /*#__PURE__*/_jsxDEV(\"svg\", {\n        version: \"1.1\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        className: cl.svg,\n        children: [normalizeLines.map((line, lineIndex) => line.dots.map((dot, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [index < line.dots.length - 1 && /*#__PURE__*/_jsxDEV(LineConnection, {\n            color: colors[lineIndex],\n            lineConnection: {\n              startPosition: dot.position,\n              endPosition: line.dots[index + 1].position\n            }\n          }, `${lineIndex}-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Circle, {\n            position: dot.position,\n            name: dot.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true))), trains.map(train => /*#__PURE__*/_jsxDEV(Circle, {\n          position: {\n            x: train.currentLocationX,\n            y: train.currentLocationY\n          },\n          name: train.id.toString(),\n          color: \"green\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"UxCjGdbt7FjCHrOodEwrC6QENYE=\");\n_c = Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useState","useMemo","Circle","LineConnection","getLines","getTrains","cl","jsxDEV","_jsxDEV","Fragment","_Fragment","colors","Map","_s","lines","setLines","trains","setTrains","fetchLines","then","data","fetchTrains","interval","setInterval","clearInterval","normalizeLines","map","line","lineName","name","dots","stations","station","position","x","locationLeftX","locationRightX","y","locationLeftY","locationRightY","className","container","children","length","version","xmlns","svg","lineIndex","dot","index","color","lineConnection","startPosition","endPosition","fileName","_jsxFileName","lineNumber","columnNumber","train","currentLocationX","currentLocationY","id","toString","_c","$RefreshReg$"],"sources":["C:/Users/Илья/Desktop/client/src/pages/Map.tsx"],"sourcesContent":["import React, { useEffect, useState, useMemo } from 'react'\r\nimport { Circle } from '../components/UI/Circle/Circle';\r\nimport { LineConnection } from '../components/UI/LineConnection/LineConnection';\r\nimport { getLines } from '../http/lineApi'\r\nimport { getTrains } from '../http/trainApi';\r\nimport { ILine } from '../interfaces/ILine';\r\nimport { ILineConnection } from '../interfaces/ILineConnection';\r\nimport { IPostition } from '../interfaces/IPosition';\r\nimport { ITrain } from '../interfaces/ITrain';\r\nimport cl from '../styles/Map.module.css';\r\n\r\ninterface IDot {\r\n    position: IPostition,\r\n    name: string\r\n}\r\n\r\ninterface ILineDraw {\r\n    lineName: string,\r\n    dots: IDot[]\r\n}\r\n\r\nconst colors = [\"red\", \"blue\", \"black\", 'pink', \"yellow\"]\r\n\r\nexport const Map = () => {\r\n    const [lines, setLines] = useState<ILine[]>([]);\r\n    const [trains, setTrains] = useState<ITrain[]>([]);\r\n\r\n    const fetchLines = async () => {\r\n        await getLines().then((data) => {\r\n            setLines(data);\r\n        })\r\n    }\r\n\r\n    const fetchTrains = async () => {\r\n        await getTrains().then((data) =>{\r\n            setTrains(data);\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchTrains();\r\n        const interval = setInterval(() => {\r\n            fetchTrains();\r\n        }, 1000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetchLines();\r\n    }, [])\r\n\r\n    const normalizeLines = useMemo<ILineDraw[]>(() => {\r\n        return lines.map((line) => {\r\n            return {\r\n                lineName: line.name,\r\n                dots: line.stations.map((station) => ({\r\n                    name: station.name,\r\n                    position: {\r\n                        x: (station.locationLeftX + station.locationRightX) / 2,\r\n                        y: (station.locationLeftY + station.locationRightY) / 2,\r\n                    }\r\n                }))\r\n            };\r\n        });\r\n    }, [lines]);\r\n\r\nreturn (\r\n    <div className={cl.container}>\r\n      <div className={cl.map}>\r\n        {normalizeLines.length > 0 && (\r\n          <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" className={cl.svg}>\r\n            {normalizeLines.map((line, lineIndex) => \r\n              line.dots.map((dot, index) =>\r\n                  <>\r\n                  {\r\n                    index < line.dots.length - 1 &&\r\n                    <LineConnection\r\n                        color={colors[lineIndex]}\r\n                        key={`${lineIndex}-${index}`}\r\n                        lineConnection={{\r\n                        startPosition: dot.position,\r\n                        endPosition: line.dots[index + 1].position\r\n                        }}\r\n                    />\r\n                  }\r\n                    <Circle position={dot.position} name={dot.name}></Circle>\r\n                  </>\r\n              )\r\n            )}\r\n             {trains.map((train) => \r\n                <Circle position={{x: train.currentLocationX, y: train.currentLocationY}} name={train.id.toString()} color=\"green\"></Circle>\r\n            )}\r\n          </svg>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}